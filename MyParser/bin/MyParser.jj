options {
  STATIC = false;
}

PARSER_BEGIN(MyParser)

public class MyParser {

	public static void main(String[] args) {
	  try {
	    MyParser parser = new MyParser( System.in );
	    parser.UnaryExpression();
	    System.out.println("Pass");
	  } catch (Throwable e) {
	    System.out.println("Fail");
	  }
	}
  
}

PARSER_END(MyParser)

SKIP: {
    " " | "\t" | "\r" | "\n" 
}

TOKEN: {
  <STRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
| <DIGIT: ["0"-"9"]>
| <INTEGER: (["1"-"9"] (["0"-"9"])*) | "0">
| <DEF: "def">
| <NAME: (["a"-"z", "A"-"Z"])+>
| <ASSIGNMENT: "=">
}

TOKEN: {
  <ADD: "+">
|   <SUB: "-">
|   <MUL: "*">
|   <DIV: "/">
|	<EQ: "==">
| <LESS: "<">
| <GREATER: " >">
| <LESSOREQUAL: "<=">
| <GREATEROREQUAL: " >=">
}

TOKEN: {
  <OBRACKET: "(">
| <CBRACKET: ")">
}

void Start(): {}{ <NAME> }
void Assignment(): {}{ <NAME> <ASSIGNMENT> <STRING> | <INTEGER> }
void VariableDeclaration(): {}{ <DEF> <NAME> <ASSIGNMENT> (<STRING> | <INTEGER>) }

void Add(): {}{ <INTEGER> <ADD> <INTEGER> }
void Sub(): {}{ <INTEGER> <SUB> <INTEGER> }
void MUL(): {}{ <INTEGER> <MUL> <INTEGER> }
void DIV(): {}{ <INTEGER> <DIV> <INTEGER> }
void Equals(): {}{ <INTEGER> <EQ> <INTEGER> }
void MathExpression(): {}{ AddExpression() }
void MultiplyExpression(): {}{ UnaryExpression() ((<MUL> | <DIV>) UnaryExpression())* }
void AddExpression(): {} { MultiplyExpression() <ADD> MultiplyExpression() }
void UnaryExpression(): {} { <OBRACKET> MathExpression() <CBRACKET> | <INTEGER> | <NAME> }
void UnaryRelational(): { } { <INTEGER> | <NAME> }
void RelationalLessExpression() : {} { UnaryRelational()  }







