options {
  STATIC = false;
}

PARSER_BEGIN(MyParser)

import java.io.FileReader;

public class MyParser {

	public static void main(String[] args) {
	  try {
	  	MyParser parser = new MyParser( System.in );
	    parser.S();
	    System.out.println("Pass");
	  } catch (Throwable e) {
	    System.out.println("Fail");
	    System.out.println(e);
	  }
	}
  
}

abstract class Exp {}
class Num extends Exp {
    int value;
    Num(int v) {value = v;}
    public String toString() {return value + "";}
}
class BinaryExp extends Exp {
    String op;
    Exp left, right;
    BinaryExp(String o, Exp l, Exp r) {op = o; left = l; right = r;}
    public String toString() {return "(" + op + " " + left + " " + right + ")";}
}

PARSER_END(MyParser)

SKIP: {
    " " | "\t" | "\r" | "\n"
}

TOKEN: {
  <REQUIRE: "require">
| <IF: "if">
| <WHILE: "while">
| <FOR: "for">
| <FUNC: "func">
| <CLASS: "class">
}

TOKEN: {
  <STRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
| <#DIGIT: ["0"-"9"]>
| <INTEGER: (["1"-"9"] (["0"-"9"])*) | "0">
| <LET: "let">
| <VAR: "var">
| <#CAPLETTER: ["A"-"Z"]>
| <#LETTER: ["_","a"-"z"] (<CAPLETTER>)*>
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*>
| <TYPE: <CAPLETTER> (<IDENTIFIER>)*>
| <ASSIGNMENT: "=">
| <RETURNSYMBOL: "->">
}

TOKEN: {
  <ADD: "+">
|   <SUB: "-">
|   <MUL: "*">
|   <DIV: "/">
|	<EQ: "==">
|	<NEQ: "!=">
| <LESS: "<">
| <GREATER: " >">
| <LESSOREQUAL: "<=">
| <GREATEROREQUAL: " >=">
}

TOKEN: {
  <OBRACKET: "(">
| <CBRACKET: ")">
| <OBRACE: "{">
| <CBRACE: "}">
| <COLON: ":">
| <COMMA: ",">
| <EOL: ";">
}

void Start(): {}{
  (
    Require()
  )+
  (
    StatementExpression()  )*
}

void Literal(): {} { (<STRING> | S()) }
void Assignment(): {}{ <IDENTIFIER> <ASSIGNMENT> Literal() <EOL> }
void VariableDeclaration(): {}{ Def() <IDENTIFIER> <COLON> <TYPE> <ASSIGNMENT> Literal() <EOL> }

void Def(): {} { <LET> | <VAR> }

void Equals(): {}{ S() <EQ> S() }

Exp S(): {Exp e;}
{
  e=E() <EOF> {return e;}
}

Exp E(): {Exp e1; Exp e2;}
{
  e1=T() ("+" e2=T() {e1 = new BinaryExp("+", e1, e2);} )* {return e1;}
}

Exp T(): {Exp e1; Exp e2;}
{
  e1=F() ("*" e2=F() {e1 = new BinaryExp("*", e1, e2);} )* {return e1;}
}

Exp F(): {Exp e; Token n;}
{
  n=<INTEGER> {return new Num(Integer.parseInt(n.image));}
|
  "(" e=E() ")" {return e;}
}


void UnaryRelational(): { } { <INTEGER> | <IDENTIFIER> }
void RelationalLessExpression() : {} { UnaryRelational() ((<LESS> | <LESSOREQUAL>) UnaryRelational())* }
void RelationalGreaterExpression() : {} { RelationalLessExpression() ((<GREATER> | <GREATEROREQUAL>) RelationalLessExpression())* }
void RelationalEqualityExpression() : {} { RelationalGreaterExpression() (( <EQ> | <NEQ> ) RelationalGreaterExpression())* }
void RelationalExpression() : {} { RelationalEqualityExpression() }

void Require(): {} {
	<REQUIRE> <IDENTIFIER>
}

void File(): { } {
	(StatementExpression())*
}

void StatementExpression(): {} {  VariableDeclaration()
| LOOKAHEAD(2) Assignment()
| IfExpression()
| WhileExpression()
| ForExpression()
| FuncDeclaration()
}

void IfExpression(): {} {
  <IF> RelationalExpression() <OBRACE>
  	(
  	  StatementExpression() 	)*
  <CBRACE>
}

void WhileExpression(): {} {
  <WHILE> RelationalExpression() <OBRACE>
  	(
  	  StatementExpression()
 	)*
  <CBRACE>
}

void ForExpression(): {} {
  <FOR> <OBRACKET> VariableDeclaration() <COMMA> RelationalExpression() <COMMA> Assignment() <CBRACKET> <OBRACE>
  	(
  	  StatementExpression()
 	)*
  <CBRACE>
}

void FuncDeclaration(): {} {
	<FUNC> <IDENTIFIER> <OBRACKET> ((<IDENTIFIER> <IDENTIFIER>) (<COMMA> <IDENTIFIER> <IDENTIFIER>)*)? <CBRACKET> <RETURNSYMBOL> <TYPE> <OBRACE>
		(
  	 		StatementExpression()
 		)*
	<CBRACE>
}





 

















